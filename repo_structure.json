{
  "generated_at": "2024-12-30T20:57:56.409131+09:00",
  "root": {
    "name": ".",
    "path": "",
    "is_dir": true,
    "children": [
      {
        "name": ".aicoder.yaml",
        "path": ".aicoder.yaml",
        "description": "- What is the code for? This code pertains to schema definitions used in an entity framework for a project involving AI coding tools.\n- Type of content: Documentation\n- Function names: None specified\n- References: The code is likely referenced within the context of the aicoder repository, specifically in relation to entity management.\n- Any other relevant information: The repository is set to exclude certain files while including schema definitions related to the entity framework, indicating a focus on data models and their structure.",
        "is_dir": false,
        "blob_hash": "8e789dd410650b81a9a9b4774480e7778ba3a9d0"
      },
      {
        "name": ".gitignore",
        "path": ".gitignore",
        "description": "- What is the code for? This is a configuration file used to store environment variables for a project.\n- Type of content: Configuration File\n- Function names: N/A (No functions defined in .env files)\n- References: Often used in conjunction with web frameworks or applications to manage settings like database connections, API keys, etc.\n- Any other relevant information: The .env file should not be committed to version control for security reasons, as it can contain sensitive information.",
        "is_dir": false,
        "blob_hash": "4c49bd78f1d08f2bc09fa0bd8191ed38b7dce5e3"
      },
      {
        "name": "DEVELOPMENT.md",
        "path": "DEVELOPMENT.md",
        "description": "- What is the code for? This content provides instructions for initializing and managing a CLI application using the cobra library, as well as generating an Ent schema for database management.\n- Type of content: Documentation\n- Function names: cobra-cli init, cobra-cli add, ent new Document, make generate\n- References: The code references GitHub repositories for cobra-cli, pgvector-go, and entgo, with specific instructions for subcommand structure and Ent schema generation.\n- Any other relevant information: It emphasizes using separate packages for each subcommand in the cobra-cli structure for better manageability.",
        "is_dir": false,
        "blob_hash": "8a3ba5835e657ed18580115f88b107a5f16b3412"
      },
      {
        "name": "LICENSE",
        "path": "LICENSE",
        "is_dir": false,
        "blob_hash": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"
      },
      {
        "name": "Makefile",
        "path": "Makefile",
        "description": "- What is the code for? This Makefile defines various tasks for a Go project, including generating code, running linter, testing, formatting, executing the main application, managing the database, migrating database schemas, and loading data.\n- Type of content: Makefile\n- Function names: generate, lint, test, fmt, run, db, migrate, load\n- References: This code is used in the context of managing a Go application, specifically for tasks related to building and maintaining the application's codebase.\n- Any other relevant information: The Makefile employs standard Go tools and commands, indicating a typical workflow for Go developers.",
        "is_dir": false,
        "blob_hash": "7038f8ac43fe67d325543b4569c67bc078cae7ed"
      },
      {
        "name": "README.md",
        "path": "README.md",
        "description": "- What is the code for? \"This content describes AICoder, an AI-powered CLI tool designed to enhance coding efficiency.\"\n- Type of content: \"Documentation\"\n- Function names: \"load\", \"search\", \"plan\", \"generate\", \"write\", \"check\"\n- References: \"AICoder uses OpenAI as an external endpoint, and relies on PostgreSQL with the PGVector extension.\"\n- Any other relevant information: \"AICoder emphasizes speed, security, compliance, and personal productivity. It requires an `OPENAI_API_KEY` for operation and includes a sample configuration in YAML format for repository management.\"",
        "is_dir": false,
        "blob_hash": "84e43032568d3ad5ae63bdaa56ddb4f2cbf6ded2"
      },
      {
        "name": "cmd",
        "path": "cmd",
        "is_dir": true,
        "children": [
          {
            "name": "db",
            "path": "cmd/db",
            "is_dir": true,
            "children": [
              {
                "name": "cmd.go",
                "path": "cmd/db/cmd.go",
                "description": "- What is the code for? This code defines a command structure for database management using the Cobra library in Go.\n- Type of content: Code\n- Function names: Command, migrateCommand, resetCommand\n- References: This code is intended for use in a command-line application that interacts with a database.\n- Any other relevant information: The package initially sets up a command for database operations and requires additional commands (migrateCommand and resetCommand) to be implemented for specific database functionalities.",
                "is_dir": false,
                "blob_hash": "b9841b8794eeba6700fb264d43c7fe2f8a16e9ff"
              },
              {
                "name": "cmd_migrate.go",
                "path": "cmd/db/cmd_migrate.go",
                "description": "- What is the code for? This code defines a command for migrating a database schema using the Ent framework with a PostgreSQL connection.\n- Type of content: Code\n- Function names: `migrateCommand`, `dbMigrate`\n- References: This code is used in the context of managing database migrations for an application using the Ent ORM.\n- Any other relevant information: The command accepts a database connection string as a flag and performs schema migrations while allowing optional configurations to drop indexes and columns.",
                "is_dir": false,
                "blob_hash": "e9e389b2cd2d95bf778989e9c03b50f5712c6bfb"
              },
              {
                "name": "cmd_reset.go",
                "path": "cmd/db/cmd_reset.go",
                "description": "- What is the code for? This code defines a command for resetting a database, specifically for handling migrations with the Ent ORM in Go.\n- Type of content: Code\n- Function names: resetCommand, reset\n- References: This code is used in conjunction with the Ent framework and PostgreSQL database.\n- Any other relevant information: The command includes a flag for a PostgreSQL connection string and performs operations including opening a database connection, deleting existing documents, and creating a new schema.",
                "is_dir": false,
                "blob_hash": "809ec23700265d76b710ba81dacaabb6110f6508"
              }
            ]
          },
          {
            "name": "load",
            "path": "cmd/load",
            "is_dir": true,
            "children": [
              {
                "name": "cmd.go",
                "path": "cmd/load/cmd.go",
                "description": "- What is the code for?: \"This code is for a command-line tool that loads the structure of a Git repository, summarizes its content using OpenAI, and exports the metadata to a JSON file.\"\n- Type of content: \"Code\"\n- Function names: \"Command\", \"loadRepoStructure\", \"traverseTree\", \"upsertDocument\", \"getEmbeddingFromDescription\", \"findFileInRepo\", \"summarizeContent\"\n- References: \"This code is used within a command-line interface built with Cobra, referencing various libraries such as go-git for Git operations and OpenAI for content summarization.\"\n- Any other relevant information: \"The tool connects to PostgreSQL for storing summaries as embeddings and requires an OpenAI API key for generating descriptions. It also handles previous summaries, avoiding unnecessary re-computation.\"",
                "is_dir": false,
                "blob_hash": "9125fd41e5930f9f7383a98d0eb224ce67077bd4"
              }
            ]
          },
          {
            "name": "root.go",
            "path": "cmd/root.go",
            "description": "- What is the code for?: This code defines the root command for an AI-powered CLI tool called Aicoder, including command initialization and configuration management.\n- Type of content: Code\n- Function names: Execute, initConfig\n- References: This code is referenced in the main function via Execute() to set up the command-line interface.\n- Any other relevant information: The Aicoder tool includes commands for loading, database management, and searching, facilitated by the Cobra library for command-line applications. It also supports configuration through a YAML file.",
            "is_dir": false,
            "blob_hash": "b79c4673283158cd0025604b59056157c07cc298"
          },
          {
            "name": "search",
            "path": "cmd/search",
            "is_dir": true,
            "children": [
              {
                "name": "cmd.go",
                "path": "cmd/search/cmd.go",
                "description": "- What is the code for? This code implements a command-line search tool that queries related files based on a user's input by utilizing OpenAI's embeddings for similarity scoring.\n- Type of content: Code\n- Function names: `Command`, `getEmbeddingFromDescription`, `fetchSimilarDocuments`\n- References: This code is part of a larger application for searching documents, utilizing PostgreSQL for data storage and OpenAI for generating embeddings.\n- Any other relevant information: It requires an OpenAI API key and a PostgreSQL connection string to function correctly. The results are sorted by similarity score and displayed to the user.",
                "is_dir": false,
                "blob_hash": "f04b07af05fb6d3c1f925a244f2f836ddd32489e"
              }
            ]
          }
        ]
      },
      {
        "name": "config",
        "path": "config",
        "is_dir": true,
        "children": [
          {
            "name": "config.go",
            "path": "config/config.go",
            "description": "- What is the code for? This code defines a configuration structure for an application, allowing for loaded settings to manage repository paths and search parameters using YAML configuration files.\n- Type of content: Code\n- Function names: `ReadConfig`, `GetConfig`, `GetLoadConfig`, `GetSearchConfig`, `matchesPath`, `IsExcluded`, `IsIncluded`\n- References: The configuration is intended for use in managing application behavior regarding file loading and searching.\n- Any other relevant information: The code utilizes the `gopkg.in/yaml.v2` package for parsing YAML files and handles errors associated with file I/O operations.",
            "is_dir": false,
            "blob_hash": "f29a38e76e93d18058192e2481529b24963baeb4"
          }
        ]
      },
      {
        "name": "ent",
        "path": "ent",
        "is_dir": true,
        "children": [
          {
            "name": "document",
            "path": "ent/document",
            "is_dir": true
          },
          {
            "name": "enttest",
            "path": "ent/enttest",
            "is_dir": true
          },
          {
            "name": "hook",
            "path": "ent/hook",
            "is_dir": true
          },
          {
            "name": "migrate",
            "path": "ent/migrate",
            "is_dir": true
          },
          {
            "name": "predicate",
            "path": "ent/predicate",
            "is_dir": true
          },
          {
            "name": "runtime",
            "path": "ent/runtime",
            "is_dir": true
          },
          {
            "name": "schema",
            "path": "ent/schema",
            "is_dir": true,
            "children": [
              {
                "name": "document.go",
                "path": "ent/schema/document.go",
                "description": "- What is the code for? This code defines the schema for a Document entity in an entity framework using Go and includes fields for id, repository, filepath, description, and an embedding vector.\n- Type of content: Code\n- Function names: (Document).Fields, (Document).Edges, (Document).Indexes\n- References: This code is typically used in applications that require storage and retrieval of document metadata along with their embeddings, possibly for machine learning or search indexing.\n- Any other relevant information: The embedding field utilizes pgvector for PostgreSQL to store high-dimensional vector data, and indexes are created for efficient querying.",
                "is_dir": false,
                "blob_hash": "6369da5ba42eefe981419639935c531e779c64eb"
              }
            ]
          }
        ]
      },
      {
        "name": "go.mod",
        "path": "go.mod",
        "description": "- What is the code for? This is a Go module file that specifies the module name, Go version, and dependencies for a project named \"github.com/nakamasato/aicoder\".\n- Type of content: Module file\n- Function names: N/A (Module file does not contain functions)\n- References: The module is named \"aicoder\" hosted at github.com/nakamasato/aicoder.\n- Any other relevant information: The file lists both direct and indirect dependencies, including various libraries for database handling, Git operations, configuration management, and API interactions, such as OpenAI's Go client. The Go version used is 1.23.2, and significant dependencies include \"entgo.io/ent\" for ORM and \"github.com/openai/openai-go\" for OpenAI's API integration.",
        "is_dir": false,
        "blob_hash": "f0d44b8ca5fa1c1a26503f5ffd243d3263731348"
      },
      {
        "name": "internal",
        "path": "internal",
        "is_dir": true,
        "children": [
          {
            "name": "pgvector",
            "path": "internal/pgvector",
            "is_dir": true,
            "children": [
              {
                "name": "debug.go",
                "path": "internal/pgvector/debug.go",
                "description": "- What is the code for? This code connects to a PostgreSQL database, creates a documents table, fetches text embeddings from the OpenAI API, and retrieves similar documents based on their embeddings.\n- Type of content: Code\n- Function names: `main`, `FetchEmbeddings`\n- References: The code interacts with PostgreSQL and the OpenAI API to manage document embeddings.\n- Any other relevant information: The code includes error handling, uses the pgvector extension for vector support, and requires the OpenAI API key to function.",
                "is_dir": false,
                "blob_hash": "d1656036a8db8355a461f15fa044cec4d7ffca55"
              }
            ]
          }
        ]
      },
      {
        "name": "main.go",
        "path": "main.go",
        "description": "- What is the code for? This program serves as the entry point for a command-line application that executes a function from an external package.\n- Type of content: Code\n- Function names: main, Execute\n- References: This code references the \"cmd\" package from the \"github.com/nakamasato/aicoder\" repository.\n- Any other relevant information: The main function is responsible for initiating the command execution process in the application.",
        "is_dir": false,
        "blob_hash": "55fcf5fa0dc2e4e2abd435255afeaaeb41de49c7"
      },
      {
        "name": "pkg",
        "path": "pkg",
        "is_dir": true,
        "children": [
          {
            "name": "vectorutils",
            "path": "pkg/vectorutils",
            "is_dir": true,
            "children": [
              {
                "name": "distance.go",
                "path": "pkg/vectorutils/distance.go",
                "description": "- What is the code for?: This function calculates the Euclidean distance between two vectors.\n- Type of content: Code\n- Function names: EuclideanDistance\n- References: This code is used in applications needing to measure the distance between two points in multi-dimensional space.\n- Any other relevant information: The function includes error handling for vectors of differing lengths and utilizes the math package for square root calculations.",
                "is_dir": false,
                "blob_hash": "9fddbf6deb7f8459b2205bfda0f83a83640e0335"
              },
              {
                "name": "distance_test.go",
                "path": "pkg/vectorutils/distance_test.go",
                "description": "- What is the code for? \"This code is for testing the Euclidean distance calculation between two vectors.\"\n- Type of content: \"Code\"\n- Function names: \"TestEuclideanDistance\"\n- References: \"Referenced functions from the 'vectorutils' package.\"\n- Any other relevant information: \"The test includes multiple test cases, each comparing two vectors and their expected Euclidean distance results using predefined values.\"",
                "is_dir": false,
                "blob_hash": "e1e16c78920534febf2935d2a89a097e2fb9073f"
              }
            ]
          }
        ]
      }
    ]
  }
}