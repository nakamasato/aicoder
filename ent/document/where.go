// Code generated by ent, DO NOT EDIT.

package document

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/nakamasato/aicoder/ent/predicate"
	pgvector "github.com/pgvector/pgvector-go"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldID, id))
}

// Repository applies equality check predicate on the "repository" field. It's identical to RepositoryEQ.
func Repository(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldRepository, v))
}

// Context applies equality check predicate on the "context" field. It's identical to ContextEQ.
func Context(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldContext, v))
}

// Filepath applies equality check predicate on the "filepath" field. It's identical to FilepathEQ.
func Filepath(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldFilepath, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldDescription, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldUpdatedAt, v))
}

// Embedding applies equality check predicate on the "embedding" field. It's identical to EmbeddingEQ.
func Embedding(v pgvector.Vector) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldEmbedding, v))
}

// RepositoryEQ applies the EQ predicate on the "repository" field.
func RepositoryEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldRepository, v))
}

// RepositoryNEQ applies the NEQ predicate on the "repository" field.
func RepositoryNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldRepository, v))
}

// RepositoryIn applies the In predicate on the "repository" field.
func RepositoryIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldRepository, vs...))
}

// RepositoryNotIn applies the NotIn predicate on the "repository" field.
func RepositoryNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldRepository, vs...))
}

// RepositoryGT applies the GT predicate on the "repository" field.
func RepositoryGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldRepository, v))
}

// RepositoryGTE applies the GTE predicate on the "repository" field.
func RepositoryGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldRepository, v))
}

// RepositoryLT applies the LT predicate on the "repository" field.
func RepositoryLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldRepository, v))
}

// RepositoryLTE applies the LTE predicate on the "repository" field.
func RepositoryLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldRepository, v))
}

// RepositoryContains applies the Contains predicate on the "repository" field.
func RepositoryContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldRepository, v))
}

// RepositoryHasPrefix applies the HasPrefix predicate on the "repository" field.
func RepositoryHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldRepository, v))
}

// RepositoryHasSuffix applies the HasSuffix predicate on the "repository" field.
func RepositoryHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldRepository, v))
}

// RepositoryEqualFold applies the EqualFold predicate on the "repository" field.
func RepositoryEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldRepository, v))
}

// RepositoryContainsFold applies the ContainsFold predicate on the "repository" field.
func RepositoryContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldRepository, v))
}

// ContextEQ applies the EQ predicate on the "context" field.
func ContextEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldContext, v))
}

// ContextNEQ applies the NEQ predicate on the "context" field.
func ContextNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldContext, v))
}

// ContextIn applies the In predicate on the "context" field.
func ContextIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldContext, vs...))
}

// ContextNotIn applies the NotIn predicate on the "context" field.
func ContextNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldContext, vs...))
}

// ContextGT applies the GT predicate on the "context" field.
func ContextGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldContext, v))
}

// ContextGTE applies the GTE predicate on the "context" field.
func ContextGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldContext, v))
}

// ContextLT applies the LT predicate on the "context" field.
func ContextLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldContext, v))
}

// ContextLTE applies the LTE predicate on the "context" field.
func ContextLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldContext, v))
}

// ContextContains applies the Contains predicate on the "context" field.
func ContextContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldContext, v))
}

// ContextHasPrefix applies the HasPrefix predicate on the "context" field.
func ContextHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldContext, v))
}

// ContextHasSuffix applies the HasSuffix predicate on the "context" field.
func ContextHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldContext, v))
}

// ContextEqualFold applies the EqualFold predicate on the "context" field.
func ContextEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldContext, v))
}

// ContextContainsFold applies the ContainsFold predicate on the "context" field.
func ContextContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldContext, v))
}

// FilepathEQ applies the EQ predicate on the "filepath" field.
func FilepathEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldFilepath, v))
}

// FilepathNEQ applies the NEQ predicate on the "filepath" field.
func FilepathNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldFilepath, v))
}

// FilepathIn applies the In predicate on the "filepath" field.
func FilepathIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldFilepath, vs...))
}

// FilepathNotIn applies the NotIn predicate on the "filepath" field.
func FilepathNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldFilepath, vs...))
}

// FilepathGT applies the GT predicate on the "filepath" field.
func FilepathGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldFilepath, v))
}

// FilepathGTE applies the GTE predicate on the "filepath" field.
func FilepathGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldFilepath, v))
}

// FilepathLT applies the LT predicate on the "filepath" field.
func FilepathLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldFilepath, v))
}

// FilepathLTE applies the LTE predicate on the "filepath" field.
func FilepathLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldFilepath, v))
}

// FilepathContains applies the Contains predicate on the "filepath" field.
func FilepathContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldFilepath, v))
}

// FilepathHasPrefix applies the HasPrefix predicate on the "filepath" field.
func FilepathHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldFilepath, v))
}

// FilepathHasSuffix applies the HasSuffix predicate on the "filepath" field.
func FilepathHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldFilepath, v))
}

// FilepathEqualFold applies the EqualFold predicate on the "filepath" field.
func FilepathEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldFilepath, v))
}

// FilepathContainsFold applies the ContainsFold predicate on the "filepath" field.
func FilepathContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldFilepath, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldDescription, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldUpdatedAt, v))
}

// EmbeddingEQ applies the EQ predicate on the "embedding" field.
func EmbeddingEQ(v pgvector.Vector) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldEmbedding, v))
}

// EmbeddingNEQ applies the NEQ predicate on the "embedding" field.
func EmbeddingNEQ(v pgvector.Vector) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldEmbedding, v))
}

// EmbeddingIn applies the In predicate on the "embedding" field.
func EmbeddingIn(vs ...pgvector.Vector) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldEmbedding, vs...))
}

// EmbeddingNotIn applies the NotIn predicate on the "embedding" field.
func EmbeddingNotIn(vs ...pgvector.Vector) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldEmbedding, vs...))
}

// EmbeddingGT applies the GT predicate on the "embedding" field.
func EmbeddingGT(v pgvector.Vector) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldEmbedding, v))
}

// EmbeddingGTE applies the GTE predicate on the "embedding" field.
func EmbeddingGTE(v pgvector.Vector) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldEmbedding, v))
}

// EmbeddingLT applies the LT predicate on the "embedding" field.
func EmbeddingLT(v pgvector.Vector) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldEmbedding, v))
}

// EmbeddingLTE applies the LTE predicate on the "embedding" field.
func EmbeddingLTE(v pgvector.Vector) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldEmbedding, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Document) predicate.Document {
	return predicate.Document(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Document) predicate.Document {
	return predicate.Document(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Document) predicate.Document {
	return predicate.Document(sql.NotPredicates(p))
}
