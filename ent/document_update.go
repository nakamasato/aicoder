// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nakamasato/aicoder/ent/document"
	"github.com/nakamasato/aicoder/ent/predicate"
	pgvector "github.com/pgvector/pgvector-go"
)

// DocumentUpdate is the builder for updating Document entities.
type DocumentUpdate struct {
	config
	hooks    []Hook
	mutation *DocumentMutation
}

// Where appends a list predicates to the DocumentUpdate builder.
func (du *DocumentUpdate) Where(ps ...predicate.Document) *DocumentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetContent sets the "content" field.
func (du *DocumentUpdate) SetContent(s string) *DocumentUpdate {
	du.mutation.SetContent(s)
	return du
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableContent(s *string) *DocumentUpdate {
	if s != nil {
		du.SetContent(*s)
	}
	return du
}

// SetDescription sets the "description" field.
func (du *DocumentUpdate) SetDescription(s string) *DocumentUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableDescription(s *string) *DocumentUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// SetEmbedding sets the "embedding" field.
func (du *DocumentUpdate) SetEmbedding(pg pgvector.Vector) *DocumentUpdate {
	du.mutation.SetEmbedding(pg)
	return du
}

// SetNillableEmbedding sets the "embedding" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableEmbedding(pg *pgvector.Vector) *DocumentUpdate {
	if pg != nil {
		du.SetEmbedding(*pg)
	}
	return du
}

// Mutation returns the DocumentMutation object of the builder.
func (du *DocumentUpdate) Mutation() *DocumentMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DocumentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DocumentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DocumentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DocumentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DocumentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt64))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Content(); ok {
		_spec.SetField(document.FieldContent, field.TypeString, value)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(document.FieldDescription, field.TypeString, value)
	}
	if value, ok := du.mutation.Embedding(); ok {
		_spec.SetField(document.FieldEmbedding, field.TypeOther, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DocumentUpdateOne is the builder for updating a single Document entity.
type DocumentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DocumentMutation
}

// SetContent sets the "content" field.
func (duo *DocumentUpdateOne) SetContent(s string) *DocumentUpdateOne {
	duo.mutation.SetContent(s)
	return duo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableContent(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetContent(*s)
	}
	return duo
}

// SetDescription sets the "description" field.
func (duo *DocumentUpdateOne) SetDescription(s string) *DocumentUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableDescription(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// SetEmbedding sets the "embedding" field.
func (duo *DocumentUpdateOne) SetEmbedding(pg pgvector.Vector) *DocumentUpdateOne {
	duo.mutation.SetEmbedding(pg)
	return duo
}

// SetNillableEmbedding sets the "embedding" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableEmbedding(pg *pgvector.Vector) *DocumentUpdateOne {
	if pg != nil {
		duo.SetEmbedding(*pg)
	}
	return duo
}

// Mutation returns the DocumentMutation object of the builder.
func (duo *DocumentUpdateOne) Mutation() *DocumentMutation {
	return duo.mutation
}

// Where appends a list predicates to the DocumentUpdate builder.
func (duo *DocumentUpdateOne) Where(ps ...predicate.Document) *DocumentUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DocumentUpdateOne) Select(field string, fields ...string) *DocumentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Document entity.
func (duo *DocumentUpdateOne) Save(ctx context.Context) (*Document, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DocumentUpdateOne) SaveX(ctx context.Context) *Document {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DocumentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DocumentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DocumentUpdateOne) sqlSave(ctx context.Context) (_node *Document, err error) {
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt64))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Document.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, document.FieldID)
		for _, f := range fields {
			if !document.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != document.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Content(); ok {
		_spec.SetField(document.FieldContent, field.TypeString, value)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(document.FieldDescription, field.TypeString, value)
	}
	if value, ok := duo.mutation.Embedding(); ok {
		_spec.SetField(document.FieldEmbedding, field.TypeOther, value)
	}
	_node = &Document{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
